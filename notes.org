* TO DO List (C-c C-t toggles completion)
** DONE Create and document function app
** DONE Install and configure CosmosDB emulator
** DONE Add function to save to CosmosDB
** DONE Add function to save to SQL Server
** DONE Configure my dev Azure for CosmosDB
** DONE Configure my dev Azure for SQL Server
** DONE Update function app to point to Azure databases
** DONE Figure out how to compare and measure databases
** TODO Create function to read from CosmosDB
** TODO Create function to read from SQL Server
** TODO Test read performance
** Presentations
*** TODO Azure Function Creation and Development
**** What is the story arc? Why do people care?
*** TODO Exploring CosmosDB
**** Explore how to interact with it
**** Explore the local emulator
**** What question am I trying to answer?
***** Is it really as expensive as people claim?
***** How can I practically use this technology?
** Blog Post Ideas
*** Developing an Azure Function locally
*** Interacting with CosmosDB using the emulator
*** Using SQL Server on Linux in Docker for Development
*** Comparing SQL Server elastic pool to CosmosDB
**** ease of creation
**** speed of development
**** cost of Azure resources
* Function App creation
** Run commands: 
*** func init AzureDatabaseComparison --docker
**** Select a worker runtime:  1. dotnet
Writing /Users/darrenhale/code/github/AzureDatabaseComparison/.vscode/extensions.json
Writing Dockerfile
*** cd AzureDatabaseComparison
*** func extensions install
** Create the function.json file:
{
    "bindings": [
        {
          "type": "httpTrigger",
          "direction": "in",
          "route": "db",
          "authLevel": "anonymous"
        },
        {
            "type": "http",
            "direction": "out"
        }
    ]
}
** Create a new function:
*** func new
Select a template: 
1. QueueTrigger
2. HttpTrigger
3. BlobTrigger
4. TimerTrigger
5. DurableFunctionsOrchestration
6. SendGrid
7. EventHubTrigger
8. ServiceBusQueueTrigger
9. ServiceBusTopicTrigger
10. EventGridTrigger
11. CosmosDBTrigger
12. IotHubTrigger
Choose option: 
**** Select a template:  2. HttpTrigger
**** Function name:  HelloWorld
HelloWorld

The function "HelloWorld" was created successfully from the "HttpTrigger" template.
** Remove the following line from local.settings.json:
        "AzureWebJobsStorage": "",
** Run the following command to test it:
*** func start --build
Azure Functions Core Tools (2.1.725 Commit hash: 68f448fe6a60e1cade88c2004bf6491af7e5f1df)
Function Runtime Version: 2.0.12134.0
Skipping 'AzureWebJobsStorage' from local settings as it's already defined in current environment variables.
[2/11/19 4:26:25 PM] Building host: startup suppressed:False, configuration suppressed: False
[2/11/19 4:26:25 PM] Reading host configuration file '/Users/darrenhale/code/github/AzureDatabaseComparison/bin/output/host.json'
[2/11/19 4:26:25 PM] Host configuration file read:
[2/11/19 4:26:25 PM] {
[2/11/19 4:26:25 PM]   "version": "2.0"
[2/11/19 4:26:25 PM] }
[2/11/19 4:26:25 PM] Initializing Host.
[2/11/19 4:26:25 PM] Host initialization: ConsecutiveErrors=0, StartupCount=1
[2/11/19 4:26:25 PM] Starting JobHost
[2/11/19 4:26:25 PM] Starting Host (HostId=newpc02-502933657, InstanceId=7176da5f-062d-49ed-85df-c6ddd054b24c, Version=2.0.12134.0, ProcessId=74426, AppDomainId=1, Debug=False, FunctionsExtensionVersion=)
[2/11/19 4:26:25 PM] Loading functions metadata
[2/11/19 4:26:25 PM] 1 functions loaded
[2/11/19 4:26:25 PM] Generating 1 job function(s)
[2/11/19 4:26:25 PM] Found the following functions:
[2/11/19 4:26:25 PM] AzureDatabaseComparison.HelloWorld.Run
[2/11/19 4:26:25 PM] 
[2/11/19 4:26:25 PM] Host initialized (244ms)
[2/11/19 4:26:25 PM] Host started (259ms)
[2/11/19 4:26:25 PM] Job host started
Hosting environment: Production
Content root path: /Users/darrenhale/code/github/AzureDatabaseComparison/bin/output
Now listening on: http://0.0.0.0:7071
Application started. Press Ctrl+C to shut down.
Listening on http://0.0.0.0:7071/
Hit CTRL-C to exit...

Http Functions:

	HelloWorld: http://localhost:7071/api/HelloWorld

[2/11/19 4:26:30 PM] Host lock lease acquired by instance ID '0000000000000000000000002094B47E'.
** Navigate to http://localhost:7071/api/HelloWorld?name=Me
*** Hello, Me -> should appear in browser
** Reference Links
*** https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local
*** https://medium.com/@asavaritayal/azure-functions-on-kubernetes-75486225dac0
* CosmosDB Work
** Installed CosmosDB Emulator
https://docs.microsoft.com/en-us/azure/cosmos-db/local-emulator
*** Navigate to https://localhost:8081/_explorer/index.html to work with emulator
** Grab .NET sample code from https://github.com/Azure/azure-cosmos-dotnet-v2/blob/f374cc601f4cf08d11c88f0c3fa7dcefaf7ecfe8/samples/code-samples/DocumentManagement/Program.cs
*** CosmosSample.cs
** Install CosmosDB Azure Functions extension
func extensions install --package Microsoft.Azure.WebJobs.Extensions.CosmosDB --version 3.0.2
*** How to install extensions: https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/functions-core-tools-install-extension.md
* SQL Server on Linux in Docker
** using microsoft/mssql-server-linux:latest Docker image
** Command to start the server
docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=P@ssw0rd" -p 1433:1433 --name dhalesb_sql -v C:\darren\data:/home/data -v C:\darren\github\AzureDatabaseComparison:/opt/code -d microsoft/mssql-server-linux:latest
** Connect to running container:
docker exec -it dhalesb_sql "bash"
** Use sqlcmd:
/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -p 'P@ssw0rd' -Q '<query>'
** create a database:
create database Merchant; go
** Access DB outside container
*** get IP address of box
ipconfig
*** connect using sqlcmd
sqlcmd -S <ip_address>,1433 -U sa -P '<password>'
** Install System.Data.SqlClient
func extensions install --package System.Data.SqlClient --version 4.5.1
** Reference Link
https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-2017&pivots=cs1-bash
* Azure setup
** Use Visual Studio Professional subscription
** create resource group for this stuff
** create Cosmos DB account
*** account name: cosmos-experiment
*** API:  Core (SQL)
*** Location: Central US
*** Geo-Redundancy:  Enable
*** Multi-region Writes:  Enable
*** Create
*** URI:  https://cosmos-experiment.documents.azure.com:443/
*** Primary Key: <key>
** create SQL account
*** Database Name: Performance_Experiment
*** Subscription:  Visual Studio Professional
*** Resource Group: experiment_functions_cosmos
*** Select source:  Blank database
*** Configure required settings ->
**** Server name: performanceexperiment
**** server admin login:  dhale
**** password:  <my password>
**** Location: Central US
**** Allow Azure services to access server:  Checked
**** Advanced Data Security:  Not now
*** Want to use SQL elastic pool?  Yes
*** Collation:  SQL_Latin1_General_CP1_CI_AS
*** Create
*** Connection String: Server=tcp:performanceexperiment.database.windows.net,1433;Initial Catalog=Performance_Experiment;Persist Security Info=False;User ID=dhale;Password=<my password>;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
** Azure Function
*** create a storage account
**** Subscription:  Visual Studio Professional
**** Resource Group:  experiment_functions_cosmos
**** Storage account name:  dehcosmostest
**** Location:  Central US
**** Performance: Standard
**** Account Kind:  StorageV2 (general purpose v2)
**** Replication: Locally-redundant storage (LRS)
**** Access tier: Hot
**** Create
**** 
*** create function app
**** az login
**** az functionapp create --resource-group experiment_functions_cosmos --consumption-plan-location centralus --name AzureDatabaseComparison --storage-account dehcosmostest
*** deploy function app (after changing connection strings)
****  func azure functionapp publish AzureDatabaseComparison --force
***** the --force was necessary because the tooling to create the function app created a v1 app and I need a v2 app (I'm also using the v2 tooling)
*** Endpoints
Functions in AzureDatabaseComparison:
    CompareDatabases - [httpTrigger]
        Invoke url: https://azuredatabasecomparison.azurewebsites.net/api/comparedatabases?code=8IAaLwRxefw4pY/aIWDsmjU11x10OT6gxBkpzdHKHU6sqS2d0/VQkg==

    HelloWorld - [httpTrigger]
        Invoke url: https://azuredatabasecomparison.azurewebsites.net/api/helloworld?code=5UarxZV8Y2fN/avxRcObTghgTaYtMkctagjVGR6Y4Jkuii1vYGmQLA==

    WriteToCosmos - [httpTrigger]
        Invoke url: https://azuredatabasecomparison.azurewebsites.net/api/writetocosmos?code=Bhub56shP6AdVfcrCKwbwD2MhxEXOf51a4XvQaMgLCXNTbLmz8H9iQ==

    WriteToSql - [httpTrigger]
        Invoke url: https://azuredatabasecomparison.azurewebsites.net/api/writetosql?code=IahNWLsHuZLVlgs6HFPto0YNcb8l3xGPVfLmoxSCmttEilnC3LHBPw==
** Run the CompareDatabases function
*** Initial results
Ran sql 100 with 100 successes and 0 failures in 9 sec.
Ran cosmos 100 with 100 successes and 0 failures in 12 sec.
*** 
